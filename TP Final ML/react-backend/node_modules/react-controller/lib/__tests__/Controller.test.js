'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _enzyme = require('enzyme');

var _Controller = require('../Controller');

var _Controller2 = _interopRequireDefault(_Controller);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var failures = 0;
global.fetch = function (path, options) {
  return new Promise(function (resolve, reject) {
    if (path == 'foobar') {
      return resolve({ ok: true, json: function json() {
          return { foo: 'bar' };
        }
      });
    }
    if (path == 'barbaz') {
      return resolve({ ok: true, json: function json() {
          return { bar: 'baz' };
        }
      });
    }
    if (path == 'not-ok') {
      return resolve({ ok: false, status: 500 });
    }
    if (path == 'not-found') {
      return resolve({ ok: false, status: 404 });
    }
    if (path == 'fail-once') {
      if (!failures) {
        failures = 1;
        return resolve({ ok: false, status: 500 });
      } else {
        return resolve({ ok: true, json: function json() {
            return { foo: 'success' };
          }
        });
      }
    }
    return reject({ message: path });
  });
};

describe('<Controller />', function () {
  it('Intitial props are applied to the child component.', function () {

    var Child = function Child(_ref) {
      var foo = _ref.foo;
      return _react2.default.createElement(
        'article',
        null,
        foo
      );
    };
    var initialProps = { foo: 'baz' };
    var wrapper = (0, _enzyme.render)(_react2.default.createElement(
      _Controller2.default,
      { path: 'foobar', initialProps: initialProps },
      _react2.default.createElement(Child, null)
    ));

    expect(wrapper.html()).toEqual('<article>baz</article>');
  });

  it('Show nothing when no loading component is defined.', function () {
    var Child = function Child(_ref2) {
      var foo = _ref2.foo;
      return _react2.default.createElement(
        'article',
        null,
        foo
      );
    };
    var wrapper = (0, _enzyme.mount)(_react2.default.createElement(
      _Controller2.default,
      { path: 'foobar' },
      _react2.default.createElement(Child, null)
    ));

    expect(wrapper.state().pages).toEqual({});
    expect(wrapper.html()).toEqual(null);
  });

  it('Loading component shows when no initial props are supplied.', function () {
    var Loading = function Loading() {
      return _react2.default.createElement(
        'div',
        null,
        'Loading...'
      );
    };
    var Child = function Child(_ref3) {
      var foo = _ref3.foo;
      return _react2.default.createElement(
        'article',
        null,
        foo
      );
    };
    var wrapper = (0, _enzyme.mount)(_react2.default.createElement(
      _Controller2.default,
      { path: 'foobar', loadingComponent: Loading },
      _react2.default.createElement(Child, null)
    ));

    expect(wrapper.html()).toEqual('<div>Loading...</div>');
  });

  it('Passes fetched data into the child component.', function (done) {
    var Child = function Child(_ref4) {
      var foo = _ref4.foo;
      return _react2.default.createElement(
        'article',
        null,
        foo
      );
    };
    var wrapper = (0, _enzyme.mount)(_react2.default.createElement(
      _Controller2.default,
      { path: 'foobar' },
      _react2.default.createElement(Child, null)
    ));

    setImmediate(function () {
      expect(wrapper.html()).toEqual('<article>bar</article>');
      done();
    });
  });

  it('Static components should not fetch data.', function () {
    var Child = function Child() {
      return _react2.default.createElement(
        'article',
        null,
        'Static'
      );
    };
    var wrapper = (0, _enzyme.mount)(_react2.default.createElement(
      _Controller2.default,
      { path: 'foobar', isStatic: true },
      _react2.default.createElement(Child, null)
    ));

    expect(wrapper.state()).toEqual({
      loading: false,
      pages: { foobar: { data: {}, error: null } }
    });
    expect(wrapper.html()).toEqual('<article>Static</article>');
  });

  it('Returns an error with a given status.', function (done) {
    var Child = function Child(_ref5) {
      var foo = _ref5.foo;
      return _react2.default.createElement(
        'article',
        null,
        foo
      );
    };
    var Oops = function Oops(_ref6) {
      var status = _ref6.status;
      return _react2.default.createElement(
        'article',
        null,
        'A ',
        status,
        ' Error Occurred!'
      );
    };
    var wrapper = (0, _enzyme.mount)(_react2.default.createElement(
      _Controller2.default,
      { path: '404', onError: function onError(error) {
          return _react2.default.createElement(Oops, { status: error.status });
        } },
      _react2.default.createElement(Child, null)
    ));
    setImmediate(function () {
      expect(wrapper.text()).toEqual('A 404 Error Occurred!');
      done();
    });
  });

  it('Returns an error from any bad status code.', function (done) {
    var Child = function Child(_ref7) {
      var foo = _ref7.foo;
      return _react2.default.createElement(
        'article',
        null,
        foo
      );
    };
    var Oops = function Oops(_ref8) {
      var status = _ref8.status;
      return _react2.default.createElement(
        'article',
        null,
        'A ',
        status,
        ' Error Occurred!'
      );
    };
    var wrapper = (0, _enzyme.mount)(_react2.default.createElement(
      _Controller2.default,
      { path: 'not-ok', onError: function onError(error) {
          return _react2.default.createElement(Oops, { status: error.status });
        } },
      _react2.default.createElement(Child, null)
    ));

    setImmediate(function () {
      expect(wrapper.text()).toEqual('A 500 Error Occurred!');
      done();
    });
  });

  it('Returns an error with a generic 500 error.', function (done) {
    var Child = function Child(_ref9) {
      var foo = _ref9.foo;
      return _react2.default.createElement(
        'article',
        null,
        foo
      );
    };
    var Oops = function Oops(_ref10) {
      var status = _ref10.status;
      return _react2.default.createElement(
        'article',
        null,
        'A ',
        status,
        ' Error Occurred!'
      );
    };
    var wrapper = (0, _enzyme.mount)(_react2.default.createElement(
      _Controller2.default,
      { path: 'foobarbaz', onError: function onError(error) {
          return _react2.default.createElement(Oops, { status: error.status });
        } },
      _react2.default.createElement(Child, null)
    ));

    setImmediate(function () {
      expect(wrapper.text()).toEqual('A 500 Error Occurred!');
      done();
    });
  });

  it('If page is fetched with an error, retry when fetched again.', function (done) {

    var wrapper = (0, _enzyme.mount)(_react2.default.createElement(
      _Controller2.default,
      { cache: true, path: 'foobar' },
      function (error, props) {
        return error ? _react2.default.createElement(
          'article',
          null,
          'A ',
          error.status,
          ' Error Occurred!'
        ) : _react2.default.createElement(
          'article',
          null,
          props.foo
        );
      }
    ));

    setImmediate(function () {
      expect(wrapper.text()).toEqual('bar');
      wrapper.setProps({ path: 'fail-once', cache: true });

      setImmediate(function () {
        expect(wrapper.state().pages['fail-once']).toEqual({ data: {}, error: { status: 500 } });
        expect(wrapper.text()).toEqual('A 500 Error Occurred!');
        wrapper.setProps({ path: 'foobar', cache: true });

        setImmediate(function () {
          expect(wrapper.text()).toEqual('bar');
          wrapper.setProps({ path: 'fail-once', cache: true });

          setImmediate(function () {
            expect(wrapper.state().pages['fail-once']).toEqual({ data: { foo: 'success' }, error: null });
            expect(wrapper.text()).toEqual('success');
            done();
          });
        });
      });
    });
  });

  it('Passes fetched data to child function.', function (done) {
    var wrapper = (0, _enzyme.mount)(_react2.default.createElement(
      _Controller2.default,
      { path: 'foobar' },
      function (error, props) {
        return error ? _react2.default.createElement(
          'article',
          null,
          'A ',
          error.status,
          ' Error Occurred!'
        ) : _react2.default.createElement(
          'article',
          null,
          props.foo
        );
      }
    ));

    expect(wrapper.html()).toEqual(null);

    setImmediate(function () {
      expect(wrapper.html()).toEqual('<article>bar</article>');
      done();
    });
  });

  it('Returns an error to child function.', function (done) {
    var wrapper = (0, _enzyme.mount)(_react2.default.createElement(
      _Controller2.default,
      { path: 'foobarbaz' },
      function (error, props) {
        return error ? _react2.default.createElement(
          'article',
          null,
          'A ',
          error.status,
          ' Error Occurred!'
        ) : _react2.default.createElement(
          'article',
          null,
          props.foo
        );
      }
    ));

    expect(wrapper.html()).toEqual(null);

    setImmediate(function () {
      expect(wrapper.text()).toEqual('A 500 Error Occurred!');
      done();
    });
  });

  it('Maintains cache between requests.', function (done) {
    var initialProps = { foo: 'start' };
    var Child = function Child(_ref11) {
      var foo = _ref11.foo;
      return _react2.default.createElement(
        'article',
        null,
        foo
      );
    };
    var wrapper = (0, _enzyme.mount)(_react2.default.createElement(
      _Controller2.default,
      { path: 'foobarbaz', initialProps: initialProps, cache: true },
      _react2.default.createElement(Child, null)
    ));
    expect(wrapper.html()).toEqual('<article>start</article>');
    expect(wrapper.state()).toEqual({
      loading: false,
      pages: { foobarbaz: { data: initialProps, error: null } }
    });

    wrapper.setProps({ path: 'foobar', cache: true });
    expect(wrapper.state().loading).toEqual(true);

    setImmediate(function () {
      expect(wrapper.html()).toEqual('<article>bar</article>');
      expect(wrapper.state()).toEqual({
        loading: false,
        pages: {
          foobarbaz: { data: initialProps, error: null },
          foobar: { data: { foo: 'bar' }, error: null }
        }
      });
      done();
    });
  });

  it('By default, don\'t cache pages.', function (done) {
    var initialProps = { foo: 'start' };
    var Child = function Child(_ref12) {
      var foo = _ref12.foo;
      return _react2.default.createElement(
        'article',
        null,
        foo
      );
    };
    var wrapper = (0, _enzyme.mount)(_react2.default.createElement(
      _Controller2.default,
      { path: 'foobarbaz', initialProps: initialProps },
      _react2.default.createElement(Child, null)
    ));
    expect(wrapper.html()).toEqual('<article>start</article>');
    expect(wrapper.state()).toEqual({
      loading: false,
      pages: { foobarbaz: { data: initialProps, error: null } }
    });

    wrapper.setProps({ path: 'foobar' });
    expect(wrapper.state().loading).toEqual(true);

    setImmediate(function () {
      expect(wrapper.html()).toEqual('<article>bar</article>');
      expect(wrapper.state()).toEqual({
        loading: false,
        pages: {
          foobar: { data: { foo: 'bar' }, error: null }
        }
      });
      done();
    });
  });

  it('Prefetch function can be called from the child component.', function (done) {
    var Child = function (_Component) {
      _inherits(Child, _Component);

      function Child() {
        _classCallCheck(this, Child);

        return _possibleConstructorReturn(this, (Child.__proto__ || Object.getPrototypeOf(Child)).apply(this, arguments));
      }

      _createClass(Child, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
          this.context.controller.prefetch('foobar');
        }
      }, {
        key: 'render',
        value: function render() {
          return _react2.default.createElement(
            'div',
            null,
            '...'
          );
        }
      }]);

      return Child;
    }(_react.Component);

    Child.contextTypes = {
      controller: _propTypes2.default.object.isRequired
    };


    var initialProps = { foo: 'start' };
    var wrapper = (0, _enzyme.mount)(_react2.default.createElement(
      _Controller2.default,
      { path: 'foobarbaz', cache: true, initialProps: initialProps },
      _react2.default.createElement(Child, null)
    ));

    expect(wrapper.html()).toEqual('<div>...</div>');
    expect(wrapper.state()).toEqual({
      loading: false,
      pages: {
        foobarbaz: { data: initialProps, error: null },
        foobar: { data: 'INFLIGHT', error: null }
      }
    });

    setImmediate(function () {
      expect(wrapper.state()).toEqual({
        loading: false,
        pages: {
          foobarbaz: { data: initialProps, error: null },
          foobar: { data: { foo: 'bar' }, error: null }
        }
      });
      done();
    });
  });

  it('Prefetched data should not be fetched on path change.', function (done) {
    var Child = function (_Component2) {
      _inherits(Child, _Component2);

      function Child() {
        _classCallCheck(this, Child);

        return _possibleConstructorReturn(this, (Child.__proto__ || Object.getPrototypeOf(Child)).apply(this, arguments));
      }

      _createClass(Child, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
          this.context.controller.prefetch('foobar');
        }
      }, {
        key: 'render',
        value: function render() {
          return _react2.default.createElement(
            'div',
            null,
            '...'
          );
        }
      }]);

      return Child;
    }(_react.Component);

    Child.contextTypes = {
      controller: _propTypes2.default.object.isRequired
    };


    var wrapper = (0, _enzyme.mount)(_react2.default.createElement(
      _Controller2.default,
      { path: 'barbaz', cache: true },
      _react2.default.createElement(Child, null)
    ));

    expect(wrapper.html()).toEqual(null);
    expect(wrapper.state()).toEqual({ loading: true, pages: {} });

    setImmediate(function () {
      expect(wrapper.state()).toEqual({
        loading: false,
        pages: {
          barbaz: { data: { bar: 'baz' }, error: null },
          foobar: { data: { foo: 'bar' }, error: null }
        }
      });
      done();
    });
  });

  it('Replace function can be called from the child component.', function () {
    var Child = function (_Component3) {
      _inherits(Child, _Component3);

      function Child() {
        _classCallCheck(this, Child);

        return _possibleConstructorReturn(this, (Child.__proto__ || Object.getPrototypeOf(Child)).apply(this, arguments));
      }

      _createClass(Child, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
          this.context.controller.replace('foobar', { foo: 'finish' });
        }
      }, {
        key: 'render',
        value: function render() {
          return _react2.default.createElement(
            'div',
            null,
            '...'
          );
        }
      }]);

      return Child;
    }(_react.Component);

    Child.contextTypes = {
      controller: _propTypes2.default.object.isRequired
    };


    var initialProps = { foo: 'start' };
    var wrapper = (0, _enzyme.mount)(_react2.default.createElement(
      _Controller2.default,
      { path: 'foobar', cache: true, initialProps: initialProps },
      _react2.default.createElement(Child, null)
    ));

    expect(wrapper.html()).toEqual('<div>...</div>');
    expect(wrapper.state()).toEqual({
      loading: false,
      pages: {
        foobar: { data: { foo: 'finish' }, error: null }
      }
    });
  });

  it('Replace path that doesn\'t exist? Do nothing.', function () {
    var Child = function (_Component4) {
      _inherits(Child, _Component4);

      function Child() {
        _classCallCheck(this, Child);

        return _possibleConstructorReturn(this, (Child.__proto__ || Object.getPrototypeOf(Child)).apply(this, arguments));
      }

      _createClass(Child, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
          this.context.controller.replace('not-found', { foo: 'barbaz' });
        }
      }, {
        key: 'render',
        value: function render() {
          return _react2.default.createElement(
            'div',
            null,
            '...'
          );
        }
      }]);

      return Child;
    }(_react.Component);

    Child.contextTypes = {
      controller: _propTypes2.default.object.isRequired
    };


    var initialProps = { foo: 'start' };
    var wrapper = (0, _enzyme.mount)(_react2.default.createElement(
      _Controller2.default,
      { path: 'foobar', cache: true, initialProps: initialProps },
      _react2.default.createElement(Child, null)
    ));

    expect(wrapper.html()).toEqual('<div>...</div>');
    expect(wrapper.state()).toEqual({
      loading: false,
      pages: {
        foobar: { data: initialProps, error: null }
      }
    });
  });
});