'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var INFLIGHT = 'INFLIGHT';

/**
 * Controller component controls the fetching and storage of page data.
 */

var Controller = function (_Component) {
  _inherits(Controller, _Component);

  /**
   * New controller component.
   *
   * @param {Object} [props]
   */


  /**
   * Default Props.
   *
   * @type {Object}
   */
  function Controller(props) {
    _classCallCheck(this, Controller);

    var _this = _possibleConstructorReturn(this, (Controller.__proto__ || Object.getPrototypeOf(Controller)).call(this, props));

    var initialProps = props.initialProps,
        path = props.path,
        isStatic = props.isStatic;

    var initialState = _defineProperty({}, path, { data: initialProps || {}, error: null });

    _this.state = {
      loading: initialProps === null && isStatic === false,
      pages: initialProps || isStatic ? initialState : {}
    };

    _this.getPage = _this.getPage.bind(_this);
    _this.pageExists = _this.pageExists.bind(_this);
    _this.pageHasError = _this.pageHasError.bind(_this);
    _this.addPage = _this.addPage.bind(_this);
    return _this;
  }

  /**
   * Component did mount, get the page from the given path.
   */


  /**
   * Child Context Types
   *
   * @type {Object}
   */

  /**
   * Prop Types.
   *
   * @type {Object}
   */


  _createClass(Controller, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      if (this.props.initialProps || this.props.isStatic) return;

      this.setState({ loading: true }, function () {
        return _this2.doImperativeWork(_this2.props);
      });
    }

    /**
     * Component will receive props, get the page from the given path.
     *
     * @param {Object} [nextProps]
     */

  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var _this3 = this;

      if (nextProps.path === this.props.path) return;

      this.setState({ loading: true }, function () {
        return _this3.doImperativeWork(nextProps);
      });
    }

    /**
     * Should the controller rerender?
     *
     * @param {Object} [nextProps]
     * @param  {[type]} [nextState]
     */

  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextState) {
      var path = this.props.path;
      var _state = this.state,
          pages = _state.pages,
          loading = _state.loading;


      return nextProps.path !== path || nextState.pages[path] !== pages[path] || nextState.loading !== loading;
    }

    /**
     * Fetch JSON from the given path. Store the response in the state.
     *
     * @param {Object} [props]
     */

  }, {
    key: 'doImperativeWork',
    value: function doImperativeWork(props) {
      var path = props.path,
          options = props.options,
          isStatic = props.isStatic,
          forceReload = props.forceReload;


      if (this.pageExists(path) && !this.pageHasError(path) && !forceReload) {
        this.setState({ loading: false });
      } else if (isStatic) {
        this.addPage(path, {});
        this.setState({ loading: false });
      } else {
        this.fetch(path, options);
      }
    }

    /**
     * Add a new page to the state.
     *
     * @param {string} [key]
     * @return {Object}
     */

  }, {
    key: 'getPage',
    value: function getPage(key) {
      return this.state.pages[key];
    }

    /**
     * Does a page exist with the given key?
     *
     * @param {string} [key]
     * @return {boolean}
     */

  }, {
    key: 'pageExists',
    value: function pageExists(key) {
      return typeof this.getPage(key) !== 'undefined';
    }

    /**
     * Does a page exist with the given key?
     *
     * @param {string} [key]
     * @return {boolean}
     */

  }, {
    key: 'pageHasError',
    value: function pageHasError(key) {
      return this.pageExists(key) && this.getPage(key).error != null;
    }

    /**
     * Add a new page to the state.
     *
     * @param {string} [key]
     * @param {Object} [value]
     * @param {Object} [error]
     * @param {function|null} [callback]
     */

  }, {
    key: 'addPage',
    value: function addPage(key, value) {
      var error = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var callback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

      var pages = this.props.cache ? this.state.pages : {};

      this.setState({
        pages: Object.assign({}, pages, _defineProperty({}, key, { data: value, error: error }))
      }, callback);
    }

    /**
     * Fetch a path.
     *
     * @param {string} [path]
     * @param {Object} [options]
     */

  }, {
    key: 'fetch',
    value: function (_fetch) {
      function fetch(_x, _x2) {
        return _fetch.apply(this, arguments);
      }

      fetch.toString = function () {
        return _fetch.toString();
      };

      return fetch;
    }(function (path, options) {
      var _this4 = this;

      return fetch(path, options).then(function (response) {
        if (!response.ok) {
          throw new Error(response.status);
        }

        return response.json();
      }).then(function (page) {
        _this4.addPage(path, page);
        _this4.setState({ loading: false });
      }).catch(function (error) {
        var status = parseInt(error.message);
        _this4.addPage(path, {}, {
          status: !isNaN(status) ? status : 500
        });
        _this4.setState({ loading: false });
      });
    })

    /**
     * Pre-fetch a path.
     *
     * @param {string} [path]
     * @param {Object} [options]
     * @param {boolean} [force]
     */

  }, {
    key: 'prefetch',
    value: function prefetch(path, options) {
      var _this5 = this;

      var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      if (!force && this.getPage(path)) return;

      this.addPage(path, INFLIGHT, null, function () {
        return _this5.fetch(path, options, force);
      });
    }

    /**
     * Replace a page state.
     *
     * @param {string} [path]
     * @param {Object} [state]
     */

  }, {
    key: 'replacePage',
    value: function replacePage(path, state) {
      var pages = this.state.pages;


      if (!this.pageExists(path)) return;

      this.addPage(path, Object.assign({}, pages[path].data, state));
    }

    /**
     * Pass down a controller context object to child components.
     */

  }, {
    key: 'getChildContext',
    value: function getChildContext() {
      var controller = !this.props.cache ? {} : {
        prefetch: this.prefetch.bind(this),
        replace: this.replacePage.bind(this)
      };

      return { controller: controller };
    }

    /**
     * Render controller component.
     *
     * @return {ReactElement}
     */

  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          path = _props.path,
          children = _props.children,
          loadingComponent = _props.loadingComponent,
          onError = _props.onError;

      var props = this.getPage(path);

      if (this.state.loading || props.data === INFLIGHT) {
        return !loadingComponent ? null : (0, _react.createElement)(loadingComponent);
      }

      if (this.pageHasError(path) && onError) return onError(props.error);

      if (typeof children === 'function') {
        return children(props.error, props.data);
      } else {
        return (0, _react.cloneElement)(children, props.data);
      }
    }
  }]);

  return Controller;
}(_react.Component);

Controller.propTypes = {
  path: _propTypes2.default.string.isRequired,
  children: _propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.func]).isRequired,
  initialProps: _propTypes2.default.object,
  options: _propTypes2.default.object,
  loadingComponent: _propTypes2.default.func,
  onError: _propTypes2.default.func,
  cache: _propTypes2.default.bool,
  isStatic: _propTypes2.default.bool,
  forceReload: _propTypes2.default.bool };
Controller.defaultProps = {
  initialProps: null,
  loadingComponent: null,
  options: {},
  cache: false,
  onError: null,
  isStatic: false,
  forceReload: false };
Controller.childContextTypes = {
  controller: _propTypes2.default.object.isRequired };
exports.default = Controller;